generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model collections {
  token_id                    BigInt    @id
  token_name                  String    @db.VarChar(100)
  token_symbol                String    @db.VarChar(100)
  current_supply              BigInt
  max_supply                  BigInt
  royalty_fee                 Decimal[] @default([]) @db.Decimal
  royalty_collector           BigInt[]  @default([])
  royalty_fallback_fee_amount BigInt[]  @default([])
  royalty_fallback_fee_token  BigInt[]  @default([])
  freeze_key                  Boolean   @default(false)
  wipe_key                    Boolean   @default(false)
  supply_key                  Boolean   @default(false)
  last_synced                 DateTime  @default(now()) @db.Timestamp(6)
  nft                         nft[]
}

model nft {
  token_id             BigInt
  serial_id            BigInt
  nft_name             String?       @db.VarChar(512)
  nft_creator          String?       @db.VarChar(128)
  nft_description      String?
  nft_file             String        @db.VarChar(1024)
  nft_file_checksum    String?       @db.VarChar(64)
  nft_additional_files Boolean       @default(false)
  nft_properties       String?
  nft_locales          String        @default("en-GB") @db.VarChar(128)
  for_sale             Boolean       @default(false)
  collections          collections   @relation(fields: [token_id], references: [token_id], onDelete: NoAction, onUpdate: NoAction)
  nft_for_sale         nft_for_sale?

  @@id([token_id, serial_id])
}

model nft_additional_files {
  token_id                         BigInt
  serial_id                        BigInt
  file_index                       Int
  additional_nft_file              String  @db.VarChar(1024)
  additional_nft_file_checkshum    String? @db.VarChar(64)
  additional_nft_file_mime_type    String? @db.VarChar(64)
  additional_nft_file_metadata     String?
  additional_nft_file_metadata_uri String? @db.VarChar(1024)

  @@id([token_id, serial_id, file_index])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model platform_metrics {
  mirror_node_api_request BigInt @default(0)

  @@ignore
}

model nft_for_sale {
  token_id       BigInt
  serial_id      BigInt
  seller_account BigInt
  sale_price     Decimal @db.Decimal
  nft            nft     @relation(fields: [token_id, serial_id], references: [token_id, serial_id], onDelete: NoAction, onUpdate: NoAction, map: "nft_foreign_key")

  @@id([token_id, serial_id])
}

model platform_pricing {
  service      String   @id
  price        Decimal  @default(0) @db.Decimal
  last_updated DateTime @default(now()) @db.Timestamp(6)
}
